// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// start schema
model User {
  id           Int      @unique @default(autoincrement()) @db.MediumInt
  firstName    String   @db.VarChar(50)
  middleName   String?  @db.VarChar(50)
  lastName     String   @db.VarChar(50)
  mobile       String   @db.VarChar(15)
  email        String   @db.VarChar(50)
  passwordHash String   @db.VarChar(50)
  registeredAt DateTime @default(now()) @db.Timestamp(0)
  LoginAt      DateTime @default(now()) @updatedAt @db.Timestamp(0)
  intro        String   @db.TinyText
  profile      String   @db.Text
  authorId     Post[]
}

model Tag {
  id        Int       @unique @default(autoincrement()) @db.MediumInt
  title     String    @db.VarChar(100)
  metaTitle String    @db.VarChar(100)
  slug      String    @db.VarChar(100)
  content   String    @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  postId    PostTag[]
}

model Post {
  id           Int            @unique @default(autoincrement()) @db.MediumInt
  authorId     Int            @db.MediumInt
  parentId     BigInt         @db.UnsignedBigInt
  title        String         @db.VarChar(100)
  metaTitle    String         @db.VarChar(100)
  slug         String         @db.VarChar(100)
  summary      String         @db.Text
  published    String         @db.TinyText
  createdAt    DateTime       @default(now()) @db.Timestamp(0)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  publishedAt  DateTime       @default(now()) @db.Timestamp(0)
  content      String         @db.Text
  user         User           @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postTag      PostTag[]
  postCategory PostCategory[]
  postMeta     PostMeta[]
  postComment  PostComment[]
}

model PostComment {
  id          Int      @unique @default(autoincrement()) @db.MediumInt
  postId      Int      @db.MediumInt
  parentId    BigInt   @db.UnsignedBigInt
  title       String   @db.VarChar(100)
  published   String   @db.TinyText
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
  content     String   @db.Text
  post        Post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model PostTag {
  id        Int      @unique @default(autoincrement()) @db.MediumInt
  postId    Int      @db.MediumInt
  tagId     Int      @db.MediumInt
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model PostMeta {
  id        Int      @unique @default(autoincrement()) @db.MediumInt
  postId    Int      @db.MediumInt
  key       String   @db.VarChar(50)
  content   String   @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model PostCategory {
  id           Int        @unique @default(autoincrement()) @db.MediumInt
  postId       Int        @db.MediumInt
  categoryId   BigInt     @db.UnsignedBigInt
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  postCategory Category[]
}

model Category {
  id           Int           @unique @default(autoincrement()) @db.MediumInt
  parentId     Int           @db.MediumInt
  title        String        @db.VarChar(75)
  metaTitle    String        @db.VarChar(100)
  slug         String        @db.VarChar(100)
  content      String        @db.Text
  createdAt    DateTime      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime      @default(now()) @updatedAt @db.Timestamp(0)
  postCategory PostCategory? @relation(fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
